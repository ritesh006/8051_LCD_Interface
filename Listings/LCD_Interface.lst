C51 COMPILER V9.60.0.0   LCD_INTERFACE                                                     10/25/2021 14:34:20 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE LCD_INTERFACE
OBJECT MODULE PLACED IN .\Objects\LCD_Interface.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE LCD_Interface.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\List
                    -ings\LCD_Interface.lst) TABS(2) OBJECT(.\Objects\LCD_Interface.obj)

line level    source

   1          /* -------------------Project Name--------------------          
   2                      LCD (16 x 2) Interface with 8051
   3                          and display character               
   4            Here we will use P89V51RD2 microcontroller        
   5           ---------------------------------------------------- */
   6           
   7          /* ------------------- Pin Configuration --------------   
   8                      
   9                      RS    RW    E     D0  ----   D7
  10                     P2.0  P2.1  P2.2  P1.0 ----  P1.7  
  11           ---------------------------------------------------- */
  12           
  13           
  14           
  15          #include <reg52.h>              /* Register Header files for registers address */
  16          
  17          /* sbit_ is command like  #define */
  18          
  19          sbit RS = P2^0;                 /* here port 2.0 is renamed as RS (register_select)   */
  20          
  21          sbit RW = P2^1;                 /* Port 2.1 is renamed as a RW (read / write) */
  22          
  23          sbit E = P2^2;                  /* Port 2.2 is renamed as a E (Enable) */
  24          
  25          
  26          
  27          void send_command(unsigned int command_value);      /* Prototyping of sending command value function */
  28          
  29          void send_data(unsigned int command_data);          /* Prototyping of sending data function */
  30            
  31          void ms_delay(unsigned int time);                 /* Prototyping of delay function */
  32          
  33          
  34          void main ()            /* Main Start */
  35          {
  36   1        
  37   1        /* LCD Initialization */
  38   1        
  39   1        /* 2 lines and 5 x 7 dots in per character */
  40   1        
  41   1        send_command(0x38);         /* Initialize lcd of 2 lines and 5x7 dots use command (0x38) */
  42   1        
  43   1        send_command(0x0E);         /* When display is on cursor will blink  */ 
  44   1        
  45   1        send_command(0x01);         /* This will clear the data which was previously wrote to the disply register
             -s */
  46   1        
  47   1        
  48   1        while (1)
  49   1        {
  50   2          send_command(0x80);           /* shift curser on 1st line */
  51   2      
  52   2          send_data('L');
  53   2          send_data('C');
C51 COMPILER V9.60.0.0   LCD_INTERFACE                                                     10/25/2021 14:34:20 PAGE 2   

  54   2          send_data('D');
  55   2          
  56   2            send_command(0xC0);         /* shit cursor on 2nd line */
  57   2          
  58   2          send_data('I');
  59   2          send_data('N');
  60   2          send_data('T');
  61   2          send_data('E');
  62   2          send_data('R');
  63   2          send_data('F');
  64   2          send_data('A');
  65   2          send_data('C');
  66   2          send_data('E');
  67   2          
  68   2        }
  69   1        
  70   1        
  71   1        
  72   1        
  73   1      }       /* main ends here */
  74          
  75          
  76          
  77          void send_command(unsigned int command_value) /* this function send command value p1 to command register_ 
             -*/
  78          {
  79   1        P1 = command_value;     /* command value send to port P1 */
  80   1        RW = 0;                 /* for accpet data, logic low enble the write data_ pin */
  81   1        RS = 0;               /* for selecting instruction command code register in LCD use RS = low */
  82   1        E = 1;                /* To latch data present in port 1 to LCD enable pin set to high */
  83   1        ms_delay(10);         /* add some delay of 10ms */
  84   1        E = 0;                /* then enable pin set to low for completion of latching data */
  85   1      }
  86          
  87          
  88          void send_data(unsigned int data_value)
  89          {
  90   1        P1 = data_value;      /* Send data for display on lcd to Port 1 */
  91   1        RW = 0;               /* read / write pin enable using logic low for writing a data_ */
  92   1        RS = 1;               /* selecting data register using logic high */
  93   1        E = 1;                /* To latch data present in port 1 to LCD enable pin set to high */
  94   1        ms_delay(10);         /* add some delay of 10ms */
  95   1        E = 0;                /* then enable pin set to low for completion of latching data */
  96   1      
  97   1      }
  98          
  99          
 100          void ms_delay (unsigned int time)
 101          {
 102   1        unsigned int i, j;
 103   1        
 104   1        /* if we pass time argument equal to 1000 then (time * 1 ms) equal to 1 sec of 
 105   1           dealy will generate */
 106   1        
 107   1      
 108   1        for (i = 0; i < time; i++)
 109   1        {
 110   2          for (j = 0; j < 113; j++)         /* This will generate delay of 1 m.s. */
 111   2          {
 112   3          }
 113   2        }
 114   1        
C51 COMPILER V9.60.0.0   LCD_INTERFACE                                                     10/25/2021 14:34:20 PAGE 3   

 115   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    183    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
